(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{280:function(t,r,v){"use strict";v.r(r);var _=v(14),e=Object(_.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"git-命令行"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-命令行"}},[t._v("#")]),t._v(" git 命令行")]),t._v(" "),r("h3",{attrs:{id:"git-lg-别名配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-lg-别名配置"}},[t._v("#")]),t._v(" git lg 别名配置")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n")])])]),r("p",[r("strong",[t._v("git clone storename")]),t._v("：克隆仓库")]),t._v(" "),r("p",[r("strong",[t._v("git add filename | .")]),t._v("：将指定文件或当前有修改的文件全部添加到 "),r("code",[t._v("Stage")]),t._v(" 阶段")]),t._v(" "),r("p",[r("strong",[t._v("git commit -m 'commit'")]),t._v("：将 "),r("code",[t._v("Stage")]),t._v(" 阶段的文件进行提交")]),t._v(" "),r("p",[r("strong",[t._v("git commit --amend")]),t._v("：当 "),r("code",[t._v("commit")]),t._v(" 的信息需要修改时可以使用该命令重命名")]),t._v(" "),r("p",[r("strong",[t._v("git fetch")]),t._v("：当远程分支信息发生变化，可以使用该命令重新同步分支信息")]),t._v(" "),r("p",[r("strong",[t._v("git checkout [-b] branch")]),t._v("：当带有 "),r("code",[t._v("-b")]),t._v(" 时，新建分支，不带时切换到分支")]),t._v(" "),r("p",[r("strong",[t._v("git branch [-a]")]),t._v("：查看本地有的分支，当有 "),r("code",[t._v("-a")]),t._v(" 时，同时查看远程分支")]),t._v(" "),r("p",[r("strong",[t._v("git branch -D branchname")]),t._v("：删除指定分支")]),t._v(" "),r("p",[r("strong",[t._v("git branch -m old_branch new_branch")]),t._v("：重命名分支")]),t._v(" "),r("p",[r("strong",[t._v("git pull")]),t._v("：拉取代码并合并")]),t._v(" "),r("p",[r("strong",[t._v("git push origin branch")]),t._v("：向远程推送分支")]),t._v(" "),r("p",[r("strong",[t._v("git push origin --delete branch")]),t._v("：删除远程分支")]),t._v(" "),r("p",[r("strong",[t._v("git reset HEAD^ | hash")]),t._v("：回退分支的版本")]),t._v(" "),r("p",[r("strong",[t._v("git reset --soft")]),t._v("：软回溯，回退 commit 的同时保留修改内容")]),t._v(" "),r("p",[r("strong",[t._v("git merge branch")]),t._v("： 合并分支，历史记录会有分叉")]),t._v(" "),r("p",[r("strong",[t._v("git rebase branch")]),t._v("：合并分支，历史记录是一条直线，但是可能需要多次处理冲突")]),t._v(" "),r("p",[r("strong",[t._v("git rebase -i hash")]),t._v("：将若干个提交合并为一个提交")]),t._v(" "),r("p",[r("strong",[t._v("git cherry-pick hash")]),t._v("：将一个提交的修改（可以在其他分支上）合并到当前")]),t._v(" "),r("p",[r("strong",[t._v("git cherry-pick hashA..hashB")]),t._v("：(多个 commit，此时会 pick A 提交到 B 提交之间的提交不包括 A; A^..B 则包括 A)")]),t._v(" "),r("p",[r("strong",[t._v("git reflog")]),t._v("：记录了 commit 的历史操作，即便 reset --hard 也会有历史的记录可以拿到历史提交的 hash")]),t._v(" "),r("p",[r("strong",[t._v("git log")]),t._v("：查看当前分支的历史提交记录")]),t._v(" "),r("p",[r("strong",[t._v("git config --global core.autocrlf false")]),t._v("：配置 git 提交修改时忽略 "),r("code",[t._v("CRLF")]),t._v(" 格式")]),t._v(" "),r("p",[r("strong",[t._v("git config --get core.autocrlf")])]),t._v(" "),r("p",[r("strong",[t._v("git remote remove origin")]),t._v(": 删除 origin")])])}),[],!1,null,null,null);r.default=e.exports}}]);